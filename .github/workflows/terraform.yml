name: 'Terraform apply template'

on:
  workflow_call:
    inputs:
      path:
        description: 'Run test'
        required: true
        type: string
      runs-on:
        description: 'Your runner'
        required: true
        type: string
      tf_workspace: 
        description: "Select your workspace"
        required: true
        type: string
      deployment_role:
        description: AWS deployment Credential
        required: true 
        type: string
      pipeline:
        description: pipeline entry point
        required: true 
        type: string
 
 
jobs:
  terraform:
    name: 'Terraform'
    defaults:
      run:
        working-directory: ${{inputs.path}}
    runs-on:  ${{inputs.runs-on}}
#    environment:  #Here is the name of your environment
   
    # Permissions needed for OIDC token
    permissions:
      id-token: write
      contents: read
      
    steps:
    # Checkout the repository 
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: true
          
    # Configure AWS credentials (OIDC)    
    - name: Configure AWS credentials from Test account
      uses: aws-actions/configure-aws-credentials@v1
      with:
          role-to-assume: #removed
          aws-region: us-west-2

    ## get ghe image pipeline role 
    - name: Configure AWS credentials from Test account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{inputs.deployment_role}}
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
        role-duration-seconds: 3000
        aws-region: us-west-2

    # Will run linters and search for possible errors
    - uses: actions/cache@v2
      name: Cache plugin dir
      with:
        path: ~/.tflint.d/plugins
        key: ${{ matrix.os }}-tflint-${{ hashFiles('.tflint.hcl') }}
        
    # Setting up linters
    - uses: terraform-linters/setup-tflint@v1
      name: Setup TFLint
      with:
        tflint_version: v0.29.0
  
    - name: Show version
      run: tflint --version

    - name: Init TFLint
      run: tflint --init

    - name: Run TFLint
      run: tflint -f compact 
      continue-on-error: true 
       
    - name: set path to terraform cmd
      run: echo "${HOME}/bin" >> $GITHUB_PATH

    # Initialize working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init 
      
    - name: Select TF workspace
      run: terraform workspace select ${{inputs.tf_workspace}}
    
    # Checks that all Terraform configuration files adhere to a canonical format and style
    - name: Terraform Format
      id: fmt
      run: terraform fmt 
      continue-on-error: true
    
    # Validates the configuration
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color 
  
    # Evaluates and generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color

    - name: Update Pull Request
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
          
      # On push to master, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      id: apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      
